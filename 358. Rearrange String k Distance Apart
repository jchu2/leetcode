public class Solution {
    public String rearrangeString(String str, int k) {
        StringBuilder rearranged = new StringBuilder();
        HashMap<Character, Integer> map = new HashMap<>();
        for (char c: str.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        Queue<Map.Entry<Character, Integer>> maxHeap = new PriorityQueue<>(new Comparator<Map.Entry<Character, Integer>>() {
            public int compare(Map.Entry<Character, Integer> entry1, Map.Entry<Character, Integer> entry2) {
                return entry2.getValue() - entry1.getValue();
            }
        });//大到小
        Queue<Map.Entry<Character, Integer>> waitQueue = new LinkedList<>();
        maxHeap.addAll(map.entrySet());
        while(!maxHeap.isEmpty()) {
            Map.Entry<Character, Integer> current = maxHeap.poll();
            rearranged.append(current.getKey());
            current.setValue(current.getValue() - 1);
            waitQueue.offer(current);
            if(waitQueue.size() < k) continue;
            Map.Entry<Character, Integer> front = waitQueue.poll();
            if(front.getValue() > 0) maxHeap.offer(front);
        }
        return rearranged.length() == str.length() ? rearranged.toString() : "";
    }
}
